{"version":3,"sources":["components/Home.js","components/About.js","components/photo.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Homme","className","id","React","Component","Abbout","Button","variant","color","NasaPhoto","useState","photoData","setPhotoData","useEffect","a","fetch","res","json","data","fetchPhoto","src","url","alt","title","date","explanation","Ssearch","BasicExample","exact","to","activeClassName","path","Dashboard","Home","About","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kXAeeA,G,6KATP,OACI,yBAAKC,UAAU,qCACf,yBAAKC,GAAG,QACJ,wBAAID,UAAU,mBAAd,mB,GANIE,IAAMC,Y,gBCkBXC,E,uKAdP,OACI,yBAAKJ,UAAU,OACf,yBAAKC,GAAG,SACJ,yBAAKD,UAAU,mBACf,sCACA,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,sB,GARKL,IAAMC,W,+CCAZ,SAASK,IAAa,IAAD,EACFC,mBAAS,MADP,mBAC7BC,EAD6B,KAClBC,EADkB,KAepC,OAZAC,qBAAU,WAAM,4CAIhB,8BAAAC,EAAA,sEACkBC,MAAM,wFADxB,cACMC,EADN,gBAEmBA,EAAIC,OAFvB,OAEMC,EAFN,OAGAN,EAAaM,GAHb,4CAJgB,0DAEhBC,KAQG,IAEER,EAGD,yBAAKT,GAAG,SACJ,yBACAkB,IAAKT,EAAUU,IACfC,IAAKX,EAAUY,QAEf,yBAAKrB,GAAG,QACJ,4BAAKS,EAAUY,OACf,2BAAIZ,EAAUa,MACd,2BAAIb,EAAUc,eAXH,8B,ICmBRC,E,uKAtBR,OACK,yBAAKzB,UAAU,qCACf,yBAAKC,GAAG,UACR,yBAAKD,UAAU,mBAGvB,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,gBAGI,kBAACC,EAAD,a,GAjBcN,IAAMC,W,MCKb,SAASuB,IACtB,OACE,kBAAC,IAAD,KACE,yBAAKzB,GAAG,aACL,yBAAKA,GAAG,SAAQ,0CACjB,wBAAIA,GAAG,QACL,4BACE,kBAAC,IAAD,CAAS0B,OAAK,EAACC,GAAG,IAAI5B,UAAU,OAAO6B,gBAAgB,eAAc,qCAEvE,4BACE,kBAAC,IAAD,CAASF,OAAK,EAACC,GAAG,SAAS5B,UAAU,OAAO6B,gBAAgB,eAAc,wCAE5E,4BACE,kBAAC,IAAD,CAASF,OAAK,EAACC,GAAG,aAAa5B,UAAU,OAAO6B,gBAAgB,eAAc,oDAK1F,yBAAK5B,GAAG,SAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0B,OAAK,EAACG,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAACC,EAAD,UAUZ,SAASC,IACP,OACE,kBAAC,EAAD,MAIJ,SAASC,IACP,OACE,kBAAC,EAAD,MAIJ,SAASF,IACP,OACE,kBAAC,EAAD,MCtDgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a2467bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './home.css'\r\n\r\nclass Homme extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"animate__animated animate__fadeIn\">\r\n            <div id=\"home\">\r\n                <h3 className=\"animacja_tekstu\">Aplikacja</h3>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Homme","import React from \"react\";\r\nimport './about.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Abbout extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"aaa\">\r\n            <div id=\"about\">\r\n                <div className=\"animacja_tekstu\">\r\n                <p>Youtube</p>\r\n                <Button variant=\"contained\" color=\"primary\">\r\n      Hello World\r\n    </Button>\r\n    </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Abbout","import React from \"react\";\r\nimport { useState, useEffect } from 'react';\r\nimport './photo.css'\r\n\r\nexport default function NasaPhoto() {\r\nconst [photoData, setPhotoData] = useState(null);\r\n\r\nuseEffect(() => {\r\n\r\nfetchPhoto();\r\n\r\nasync function fetchPhoto() {\r\nconst res = await fetch('https://api.nasa.gov/planetary/apod?api_key=mgQtHbfrg0skbblm2RJZyqNgGSuAA9gJ5bJA9hze');\r\nconst data = await res.json();\r\nsetPhotoData(data);\r\n}\r\n\r\n}, [])\r\n\r\nif (!photoData) return <div />\r\n\r\nreturn(\r\n    <div id=\"photo\">\r\n        <img  \r\n        src={photoData.url} \r\n        alt={photoData.title}\r\n        />\r\n        <div id=\"text\">\r\n            <h2>{photoData.title}</h2>\r\n            <p>{photoData.date}</p>\r\n            <p>{photoData.explanation}</p>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport './search.css';\r\nimport NasaPhoto from './photo'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\n\r\nclass Ssearch extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n    \r\n    \r\n\r\n       return(\r\n            <div className=\"animate__animated animate__fadeIn\">\r\n            <div id=\"search\">\r\n            <div className=\"animacja_tekstu\" >\r\n            \r\n            \r\n    <Button variant=\"contained\" color=\"primary\">\r\n      Show picture\r\n    </Button>\r\n        <NasaPhoto/>\r\n    \r\n    </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n        }\r\n\r\n\r\n\r\nexport default Ssearch","import React from \"react\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport Homme from './components/Home'\nimport Abbout from './components/About'\nimport Ssearch from './components/Search'\nimport 'animate.css'\n\nexport default function BasicExample() {\n  return (\n    <Router>\n      <div id=\"nawigacja\">\n         <div id=\"tytul\"><h1>Moja Apka</h1></div>\n        <ul id=\"navi\">\n          <li>\n            <NavLink exact to=\"/\" className=\"menu\" activeClassName=\"menu-active\"><p>Home</p></NavLink>\n          </li>\n          <li>\n            <NavLink exact to=\"/about\" className=\"menu\" activeClassName=\"menu-active\"><p>Youtube</p></NavLink>\n          </li>\n          <li>\n            <NavLink exact to=\"/dashboard\" className=\"menu\" activeClassName=\"menu-active\"><p>ZdjÄ™cie Dnia</p></NavLink>\n          </li>\n        </ul>\n        </div>\n      \n<div id=\"tresc\">\n        \n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Dashboard />\n          </Route>\n        </Switch>\n\n        </div>\n    </Router>\n  );\n}\n\n\nfunction Home() {\n  return (\n    <Homme />\n  );\n}\n\nfunction About() {\n  return (\n    <Abbout />\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <Ssearch />\n  );\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}